<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Other pipelines on Variant Tools</title>
    <link>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/</link>
    <description>Recent content in Other pipelines on Variant Tools</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>import_vcf</title>
      <link>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/import_vcf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/import_vcf/</guid>
      <description>Import all variant and genotype fields from vcf files 1. Usage % vtools show pipeline import_vcf This pipeline creates a customized .fmt file to import all variant and genotype info fields of input vcf files. Available pipelines: import_vcf Pipeline &amp;quot;import_vcf&amp;quot;: This pipeline creates a customized .fmt file by scanning the header of input vcf files and imports all variant and genotype info fields of the input files in VCF format.</description>
    </item>
    
    <item>
      <title>anno_utils</title>
      <link>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/anno_utils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/anno_utils/</guid>
      <description>Annotation utility pipelines 1. Usage % vtools show pipeline anno_utils This file defines a number of pipelines to manipulate variant tools annotation databases. Available pipelines: annFileFromText, annFileFromVcf, annoDB2proj, proj2annoDB Pipeline &amp;quot;annFileFromText&amp;quot;: This pipeline reads a tab, comma or space delimited file, take its header as name of fields, guess the type of each column, and output an .ann file with these fields. The annotation database is assumed to be of type &amp;quot;field&amp;quot; and use the first column as the linked field.</description>
    </item>
    
    <item>
      <title>transmission</title>
      <link>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/transmission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/transmission/</guid>
      <description>Identification of recessive and de novo variants for family-based design This pipeline is an extension to command vtools_report transmission, the differences are
 vtools_report transmission find recessive and de novo mutations and create variant tables for each offspring. This pipeline assumes the first offspring is the affected one and remove de novo and recessive variants of the second offspring from the list. It creates a single variant table for the results.</description>
    </item>
    
    <item>
      <title>illumnina</title>
      <link>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/illumina/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/illumina/</guid>
      <description>Pipelines to assist the analysis of illumina data Usage \\( vtools show pipeline illumina A pipeline to handle illumina data prepared by CASAVA 1.8+. It imports variants from SNPs.vcf and Indel.vcf of multiple samples, separate maxgt and poly into different projects, calculate a few standard statistics and apply a few filters. All results are saved as variant tools snapshots. This pipeline uses command vtools so multi-processing is not supported. Available pipelines: load_data Pipeline &amp;quot;load_data&amp;quot;: This pipeline accepts a list of directories under which SNPs and Indels are listed in files Variations/SNPs.</description>
    </item>
    
    <item>
      <title>ANNOVAR</title>
      <link>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/annovar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/annovar/</guid>
      <description>Gene-based annotation through ANNOVAR 1. Usage % vtools show pipeline ANNOVAR Pipeline to call ANNOVAR and import results as variant info fields. Available pipelines: geneanno Pipeline &amp;quot;geneanno&amp;quot;: This pipeline exports variants in specified variant table (parameter --var_table, default to variant), executes ANNOVAR&#39;s gene- based annotation (annotate_variantion.pl --geneanno), and imports specified fields from output of the command. Four fields (two for all variants and two for exonic variants) will be imported unless you disable some of them using parameters --variant_info and --exonic_info.</description>
    </item>
    
    <item>
      <title>snpEff</title>
      <link>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/snpeff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/snpeff/</guid>
      <description>Variant effect provided by snpEFF 1. Usage This pipeline exports variants in VCF format, call snpEff to predict its effect, and import the result as an variant info field EFF.
% vtools show pipeline snpEff A pipeline to call snpEff to annotate variants. Available pipelines: eff Pipeline &amp;quot;eff&amp;quot;: This pipeline export variants in VCF format, call snpEff to annotate it, and import the EFF info as an information field. This pipeline will automatically download appropriate snpEff database (e.</description>
    </item>
    
    <item>
      <title>KING</title>
      <link>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/king/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/king/</guid>
      <description>Global ancestry and kinship inference 1. Usage % vtools show pipeline KING Pipeline to call KING to perform global ancestry and kinship inference, and import ancestry analysis results as phenotypes into sample table. Available pipelines: king Pipeline &amp;quot;king&amp;quot;: This pipeline exports genotypes in specified variant table (parameter --var_table, default to variant) for specified samples (parameter --samples, default to all samples), executes PLINK&#39;s LD pruning, (R^2&amp;lt;0.5) and analysis selected variants using KING&#39;s population ancestry and kingship analysis.</description>
    </item>
    
    <item>
      <title>filtering</title>
      <link>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/filtering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vatlab.github.io/vat-docs/documentation/pipelines/other_pipelines/filtering/</guid>
      <description>Identification of recessive and de novo variants for family-based design Usage % vtools show pipeline filtering Pipelines to filter variants. Available pipelines: denovo, recessive Pipeline &amp;quot;denovo&amp;quot;: This pipeline identifies de novo mutations from a family of unaffected parents, affected offspring, and optional unaffected siblings. It can be applied either to the current project (no --input is specified), or a snapshot (--input) for which the snapshot will be loaded and overwrite the existing project.</description>
    </item>
    
  </channel>
</rss>